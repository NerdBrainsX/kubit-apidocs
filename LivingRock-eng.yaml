openapi: 3.1.0
info:
  title: LivingRock API
  description: |
   The **LivingRock API** is a complete solution for integrating with Kubit's online banking system.
   This API allows developers to create applications that interact with various banking functionalities, 
   including user authentication, account management, fund transfers, credit and debit card management,  
   as well as generating detailed reports on transactions and balances.

    ### main features: |
    
  - **Authentication and Sessions:** Allows users to securely log in and manage their sessions.
  - **Transfers:** Facilitates money transfers between accounts within the same bank and to other financial institutions.
  - **Card Management:** Allows managing credit and debit cards, including activation, deactivation, and detail inquiries.
  - **Balance and Transaction Inquiries:** Provides access to detailed account balance and transaction information, allowing for the generation of customized reports.
  - **Payments and Services:** Integrates functionalities for making service payments and other financial transactions.

    ### Security:
    
    All interactions with the API require authentication through JWT tokens.
    Additionally, the use of HTTPS is recommended for all communications with the API to ensure data security and privacy.

    ### target audience:
    
    This API is designed for developers looking to integrate banking capabilities into their applications, 
    from mobile apps to web-based financial management solutions.
  version: 0.0.1
tags: 
  - name: Authentication
    description: 'Operations related to user authentication, session management, and OTPs'
  - name: Customers
    description: 'Operations related to contracting clients and collaborators.'
  - name: Accounts
    description: 'Operations related to accounts and their transactions.'
  - name: Payments
    description: 'Operations related to sending money to other banks.'
  - name: Transfers
    description: 'Operations related to transferring money between accounts.'
  - name: Cards
    description: 'Operations related to managing physical and virtual cards.'
  - name: Reports
    description: 'Operations related to generating reports.'
paths:
  /api/v1/auth/login:
    post:
      summary: Authentication
      deprecated: false
      description: |
        This endpoint allows users to authenticate.
      operationId: login
      tags: 
        - Authentication
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Unique key to authenticate the request.'
          required: true
          example: KU_{YOUR_KEY}
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Username.'
                  example: 'User'
                password:
                  type: string
                  format: password
                  description: 'User password.'
                  example: '1234567890'
              required:
                - password
                - username
      responses:
        '200':
          description: "Ok"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Request status.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'HTTP status code corresponding to the response.'
                    example: 200
                  data:
                    type: object
                    description: 'Object containing the resulting data.'
                    properties:
                      token:
                        type: string
                        description: 'Token used to authenticate requests.'
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
                    required:
                      - token
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Request status.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'HTTP status code corresponding to the response.'
                    example: 400
                  message:
                    type: string
                    description: Error message indicating that the request was made incorrectly.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Request status.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'HTTP status code corresponding to the response.'
                    example: 401
                  message:
                    type: string
                    description: Error message indicating that you are not authorized to perform the requested action.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Request status.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'HTTP status code corresponding to the response.'
                    example: 500
                  message:
                    type: string
                    description: 'Error message indicating an internal server failure.'
                    example: Internal Server Error
      security: []

  /api/v1/auth/password/recovery:
    post:
      summary: Password Recovery
deprecated: false
description: |
  This endpoint allows generating a new password and sending it to the user's registered email account.
operationId: password_recovery
tags: 
  - Authentication
parameters:
  - name: Kubit-Api-Key
    in: header
    description: 'Unique key to authenticate the request.'
    required: true
    example: KU_{YOUR_KEY}
    schema:
      type: string
  - name: email
    in: query
    description: 'User email.'
    required: true
    example: user@example.com
    schema:
      type: string
responses:
  '200':
    description: "Ok"
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: string
              description: 'Request status.'
              example: "ok"
            code:
              type: integer
              description: 'HTTP status code corresponding to the response.'
              example: 200
            data:
              type: object
              description: 'Object containing the resulting data.'
              properties:
                token:
                  type: string
                  description: 'Token used to authenticate requests.'
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
              required:
                - token
        '400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

  /api/v1/auth/logout:
    post:
  summary: Logout
  deprecated: false
  description: |
    This endpoint allows closing an active session.
  operationId: logout
  tags: 
    - Authentication
  parameters:
    - name: Kubit-Api-Key
      in: header
      description: 'Unique key to authenticate the request.'
      required: true
      example: KU_{YOUR_KEY}
      schema:
        type: string
    - name: Bearer Token
      in: header
      description: 'Token to authenticate the request.'
      required: true
      example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xya...
      schema:
        type: string
  responses:
    '200':
      description: "Ok"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: 'Request status.'
                example: "ok"
              code:
                type: integer
                description: 'HTTP status code corresponding to the response.'
                example: 200
    '400':
      description: 'Bad Request'
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: 'Request status.'
                examples: 'fail'
              code:
                type: integer
                description: 'HTTP status code corresponding to the response.'
                example: 400
              message:
                type: string
                description: 'Error message indicating that the request was made incorrectly.'
                example: Bad Request
       '401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

  /api/v1/auth/users/authuser:
   get:
  summary: Get Authenticated User
  deprecated: false
  description: |
    This endpoint allows retrieving the authenticated user's data.
  operationId: auth_user
  tags: 
    - Authentication
  parameters:
    - name: Kubit-Api-Key
      in: header
      description: 'Unique key to authenticate the request.'
      required: true
      example: KU_ZB2bXjQMh...
      schema:
        type: string
    - name: Bearer Token
      in: header
      description: 'Token to authenticate the request.'
      required: true
      example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
      schema:
        type: string
  responses:
    '200':
      description: "Ok"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: 'Request status.'
                example: "ok"
              code:
                type: integer
                description: 'HTTP status code corresponding to the response.'
                example: 200
              data:
                type: array
                description: 'Object containing the resulting data.'
                items:
                  properties:
                    id:
                      type: string
                      format: string
                      description: 'Unique user identifier.'
                    username:
                      type: string
                      format: string
                      description: 'Username.'
                    role_id:
                      type: integer
                      format: integer
                      description: 'User role identifier.'
                    role:
                      type: string
                      format: string
                      description: 'User role name.'
                    profile_id:
                      type: integer
                      format: integer
                      description: 'User profile identifier.'
                    profile:
                      type: string
                      format: string
                      description: 'User profile name.'
                    customer_id:
                      type: string
                      format: string
                      description: 'Identifier of the customer associated with the user.'
                    customer_type:
                      type: integer
                      format: integer
                      description: 'Type of customer associated with the user.'
                  required:
                    - id
                    - username
                    - role_id
                    - role
                    - profile_id
                    - profile
        '400':
          description: 'Bad Request'
content:
  application/json:
    schema:
      type: object
      properties:
        status:
          type: string
          description: 'Request status.'
          examples: 'fail'
        code:
          type: integer
          description: 'HTTP status code corresponding to the response.'
          example: 400
        message:
          type: string
          description: 'Error message indicating that the request was made incorrectly.'
          example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/auth/roles:
  get:
    summary: Get Roles
    deprecated: false
    description: |
      This endpoint allows retrieving user roles.
    operationId: auth_roles
    tags: 
      - Authentication
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
    responses:
      '200':
        description: "Ok"
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: array
                  description: 'Object containing the resulting data.'
                  items:
                    properties:
                        id:
                          type: string
                          format: string
                          description: 'Unique role identifier.'
                        id_profile:
                          type: string
                          format: string
                          description: 'Unique profile identifier associated with the role.'
                        name:
                          type: string
                          format: string
                          description: 'Role name.'
                        description:
                          type: boolean
                          format: boolean
                          description: 'Role description.'
                        level:
                          type: integer
                          format: integer
                          description: 'Access level of the role.'
                    required:
                      - id
                      - id_profile
                      - name
                      - description
                      - level
        '400':
         description: 'Bad Request'
content:
  application/json:
    schema:
      type: object
      properties:
        status:
          type: string
          description: 'Request status.'
          examples: 'fail'
        code:
          type: integer
          description: 'HTTP status code corresponding to the response.'
          example: 400
        message:
          type: string
          description: 'Error message indicating that the request was made incorrectly.'
          example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/auth/profiles:
  get:
    summary: Get Profiles
    deprecated: false
    description: |
      This endpoint allows retrieving profiles associated with a user role.
    operationId: auth_profiles
    tags: 
      - Authentication
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
    responses:
      '200':
        description: "Ok"
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: array
                  description: 'Object containing the resulting data.'
                  items:
                    properties:
                        id:
                          type: string
                          format: string
                          description: 'Unique profile identifier.'
                        name:
                          type: string
                          format: string
                          description: 'Profile name.'
                    required:
                      - id
                      - name
        '400':
         description: 'Bad Request'
content:
  application/json:
    schema:
      type: object
      properties:
        status:
          type: string
          description: 'Request status.'
          examples: 'fail'
        code:
          type: integer
          description: 'HTTP status code corresponding to the response.'
          example: 400
        message:
          type: string
          description: 'Error message indicating that the request was made incorrectly.'
          example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/auth/2fa/enroll:
  post:
    summary: Enroll OTP
    deprecated: false
    description: |
      This endpoint allows performing the OTP token enrollment process for making payments.
    operationId: auth_otp_enroll
    tags: 
      - Authentication
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
    responses:
      '200':
        description: "Ok"
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: string
                  description: 'QR Code in base 64'
      '400':
        description: 'Bad Request'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 400
                message:
                  type: string
                  description: 'Error message indicating that the request was made incorrectly.'
                  example: Bad Request
        '401':
          description: 'Unauthorized'
content:
  application/json:
    schema:
      type: object
      properties:
        status:
          type: string
          description: 'Request status.'
          examples: 'fail'
        code:
          type: integer
          description: 'HTTP status code corresponding to the response.'
          example: 401
        message:
          type: string
          description: 'Error message indicating that you are not authorized to perform the requested action.'
          example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/auth/2fa/validate:
  post:
    summary: Validate OTP
    deprecated: false
    description: |
      This endpoint allows performing the OTP token validation process for making payments.
    operationId: auth_otp_validate
    tags: 
      - Authentication
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: Kubit-OTP
        in: header
        description: 'OTP Token.'
        required: true
        example: OTP 123456
        schema:
          type: string
    responses:
      '200':
        description: "Ok"
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
      '400':
        description: 'Bad Request'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 400
                message:
                  type: string
                  description: 'Error message indicating that the request was made incorrectly.'
                  example: Bad Request
      '401':
        description: 'Unauthorized'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 401
                message:
                  type: string
                  description: 'Error message indicating that you are not authorized to perform the requested action.'
                  example: Unauthorized
      '500':
        description: 'Internal Server Error'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'error'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 500
                message:
                  type: string
                  description: 'Error message indicating an internal server failure.'
                  example: Internal Server Error
security: []

/api/v1/auth/keys/exchange:
  post:
    summary: Decrypt Data
    deprecated: false
    description: |
      This endpoint allows exchanging a public key to decrypt sensitive data.
    operationId: exchange_key
    tags: 
      - Authentication
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              public_key:
                type: string
                description: 'Public key'
            required:
              - public_key
      responses:
        '200':
  description: 'OK'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            example: "ok"
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 200
          data:
            type: string
            description: 'AES 256 key'
'400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/partners:
  post:
    summary: Create a contracting client
    deprecated: false
    description: |
      This endpoint allows creating a contracting client.
    operationId: partners
    tags: 
      - Customers
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              rfc:
                type: string
                description: 'RFC. Must be 12 characters for a legal entity and 13 characters for an individual.'
                example: 'XAXX010101000'
              company_name:
                type: string
                format: string
                description: 'Company name'
                example: 'MY COMPANY S.A. DE C.V.'
              economic_activity:
                type: string
                format: string
                description: 'Economic activity'
                example: 'Financial sector'
              business_activity:
                type: string
                format: string
                description: 'Industry'
                example: 'Provision of financial services'
              taxpayer_type_id:
                type: integer
                format: integer
                description: 'Taxpayer type'
                example: '1 for individual, 2 for legal entity'
              company_address:
                type: object
                description: 'Tax address'
                properties:
                  street:
                    type: string
                    format: string
                    description: 'Street'
                  num_ext:
                    type: string
                    format: string
                    description: 'Exterior number'
                  num_int:
                    type: string
                    format: string
                    description: 'Interior number'
                  reference:
                    type: string
                    format: string
                    description: 'Reference data to locate the address'
                  neighborhood:
                    type: string
                    format: string
                    description: 'Neighborhood'
                  district:
                    type: string
                    format: string
                    description: 'District / Municipality'
                  estate:
                    type: string
                    format: string
                    description: 'State / Federal entity'
                    example: ''
                  cp:
                    type: string
                    format: string
                    description: 'Postal Code'
                required:
                  - street
                  - num_ext
                  - neighborhood
                  - district
                  - estate
                  - cp
              contact_name:
                type: string
                format: string
                description: 'Full name of the contact'
              contact_email:
                type: string
                format: string
                description: 'Contact email'
              contact_tel:
                type: string
                format: string
                description: 'Contact phone number'
              company_tel:
                type: string
                format: string
                description: 'Company phone number'
            required:
              - rfc
              - company_name
              - economic_activity
              - business_activity
              - taxpayer_type_id
              - company_address
              - contact_name
              - contact_email
              - contact_tel
      responses:
        '201':
  description: 'Created'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            example: "ok"
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 201
'400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'422':
  description: Unprocessable Entity
  <table>
     <tr>
       <th>Código</th>
       <th>Descripción</th>
    </tr>
    <tr>
      <td>CODE-014</td>
      <td>Registered email account</td>
    </tr>
   </table>
  content: 
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 422
          message:
            type: string
            description: 'Error code identified.'
            example: CODE-001
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

  /api/v1/partners/paged:
    get:
      summary: Get Contracting Clients
deprecated: false
description: |
  This endpoint allows retrieving all contracting clients.
operationId: partners_paged
tags: 
  - Customers
parameters:
  - name: Kubit-Api-Key
    in: header
    description: 'Unique key to authenticate the request.'
    required: true
    example: KU_ZB2bXjQMh...
    schema:
      type: string
  - name: Bearer Token
    in: header
    description: 'Token to authenticate the request.'
    required: true
    example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
    schema:
      type: string
  - name: offset
    in: query
    description: 'Sets the first position to be returned from the query results. The default value is 0, which starts the page at the first result.'
    required: true
    example: paged?offset=1
    schema:
      type: string
  - name: limit
    in: query
    description: 'Indicates the number of records to return per page.'
    required: true
    example: paged?limit=20
    schema:
      type: string
  - name: filter
    in: query
    description: 'Text used as a search filter.'
    required: true
    schema:
      type: string
responses:                  
  '200':
    description: "Ok"
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: string
              description: 'Request status.'
              example: "ok"
            code:
              type: integer
              description: 'HTTP status code corresponding to the response.'
              example: 200
            total:
              type: integer
              description: 'Total number of records found.'
              example: 2
            data:
              type: array
              description: 'Object containing the resulting data.'
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: string
                    description: 'Unique identifier.'
                  rfc:
                    type: string
                    format: string
                    description: 'RFC.'
                  company_name:
                    type: string
                    format: string
                    description: 'Company name.'
                  economic_activity:
                    type: string
                    format: string
                    description: 'Economic activity.'
                  business_activity:
                    type: string
                    format: string
                    description: 'Industry.'
                  taxpayer_type_id:
                    type: integer
                    format: integer
                    description: 'Taxpayer type.'
                  company_address:
                    type: object
                    description: 'Tax address.'
                    properties:
                      street:
                        type: string
                        format: string
                        description: 'Street.'
                      num_ext:
                        type: string
                        format: string
                        description: 'Exterior number.'
                      num_int:
                        type: string
                        format: string
                        description: 'Interior number.'
                      reference:
                        type: string
                        format: string
                        description: 'Reference data to locate the address.'
                      neighborhood:
                        type: string
                        format: string
                        description: 'Neighborhood.'
                      district:
                        type: string
                        format: string
                        description: 'District / Municipality.'
                      estate:
                        type: string
                        format: string
                        description: 'State / Federal entity.'
                      cp:
                        type: string
                        format: string
                        description: 'Postal Code.'
                  contact_name:
                    type: string
                    format: string
                    description: 'Full name of the contact.'
                  contact_email:
                    type: string
                    format: string
                    description: 'Contact email.'
                  contact_tel:
                    type: string
                    format: string
                    description: 'Contact phone number.'
                  company_tel:
                    type: string
                    format: string
                    description: 'Company phone number.'
                  status:
                    type: integer
                    format: integer
                    description: 'Client registration status.'
                    example: "1 Created, 2 Under Review, 3 Approved, 4 Rejected"
  '400':
    description: 'Bad Request'
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: string
              description: 'Request status.'
              examples: 'fail'
            code:
              type: integer
              description: 'HTTP status code corresponding to the response.'
              example: 400
            message:
              type: string
              description: 'Error message indicating that the request was made incorrectly.'
              example: Bad Request
  '401':
    description: 'Unauthorized'
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: string
              description: 'Request status.'
              examples: 'fail'
            code:
              type: integer
              description: 'HTTP status code corresponding to the response.'
              example: 401
            message:
              type: string
              description: 'Error message indicating that you are not authorized to perform the requested action.'
              example: Unauthorized
  '500':
    description: 'Internal Server Error'
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: string
              description: 'Request status.'
              examples: 'error'
            code:
              type: integer
              description: 'HTTP status code corresponding to the response.'
              example: 500
            message:
              type: string
              description: 'Error message indicating an internal server failure.'
              example: Internal Server Error
security: []

  /api/v1/partners/{partnerId}:
    get:
  summary: Get a contracting client by ID
  deprecated: false
  description: |
    This endpoint allows retrieving a contracting client by its identifier.
  operationId: partners_id
  tags: 
    - Customers
  parameters:
    - name: Kubit-Api-Key
      in: header
      description: 'Unique key to authenticate the request.'
      required: true
      example: KU_ZB2bXjQMh...
      schema:
        type: string
    - name: Bearer Token
      in: header
      description: 'Token to authenticate the request.'
      required: true
      example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
      schema:
        type: string
    - name: partnerId
      in: path
      description: 'Unique identifier of the contracting client.'
      required: true
      example: /partners/12345
      schema:
        type: string
  responses:
    '200':
      description: "Ok"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: 'Request status.'
                example: "ok"
              code:
                type: integer
                description: 'HTTP status code corresponding to the response.'
                example: 200
              data:
                type: object
                description: 'Object containing the resulting data.'
                properties:
                  id:
                    type: string
                    format: string
                    description: 'Unique identifier.'
                  rfc:
                    type: string
                    format: string
                    description: 'RFC.'
                  company_name:
                    type: string
                    format: string
                    description: 'Company name.'
                  economic_activity:
                    type: string
                    format: string
                    description: 'Economic activity.'
                  business_activity:
                    type: string
                    format: string
                    description: 'Industry.'
                  taxpayer_type_id:
                    type: integer
                    format: integer
                    description: 'Taxpayer type.'
                  company_address:
                    type: object
                    description: 'Tax address.'
                    properties:
                      street:
                        type: string
                        format: string
                        description: 'Street.'
                      num_ext:
                        type: string
                        format: string
                        description: 'Exterior number.'
                      num_int:
                        type: string
                        format: string
                        description: 'Interior number.'
                      reference:
                        type: string
                        format: string
                        description: 'Reference data to locate the address.'
                      neighborhood:
                        type: string
                        format: string
                        description: 'Neighborhood.'
                      district:
                        type: string
                        format: string
                        description: 'District / Municipality.'
                      estate:
                        type: string
                        format: string
                        description: 'State / Federal entity.'
                      cp:
                        type: string
                        format: string
                        description: 'Postal Code.'
                  contact_name:
                    type: string
                    format: string
                    description: 'Full name of the contact.'
                    contact_email:
                        type: string
                        format: string
                        description: 'Contact email.'
                      contact_tel:
                        type: string
                        format: string
                        description: 'Contact phone number'
                      company_tel:
                        type: string
                        format: string
                        description: 'Company phone number.'
                      status:
                        type: integer
                        format: integer
                        description: 'Customer record status.'
                        example: "1 Creado, 2 En Revisión, 3 Aprobado, 4 Rechazado"
        '400':
          description: 'Bad Request'
content:
  application/json:
    schema:
      type: object
      properties:
        status:
          type: string
          description: 'Request status.'
          examples: 'fail'
        code:
          type: integer
          description: 'HTTP status code corresponding to the response.'
          example: 400
        message:
          type: string
          description: 'Error message indicating that the request was made incorrectly.'
          example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error

security: []

/api/v1/partners/{partnerId}/status/{statusId}:
  put:
    summary: Update the status of a contracting client
    deprecated: false
    description: This endpoint allows updating the status of a contracting client.
    operationId: partner_status_update
    tags: 
      - Customers
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: partnerId
        in: path
        description: 'Unique identifier of the contracting client.'
        required: true
        example: /partners/12345
        schema:
          type: string
      - name: statusId
        in: path
        description: 'Status identifier.'
        required: true
        example: /status/1
        schema:
          type: integer
    responses:
        '200':
  description: 'OK'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: "Request status."
            example: "ok"
          code:
            type: integer
            description: "HTTP status code corresponding to the response."
            example: 200
'400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: "fail"
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'422':
  description: Unprocessable Entity
  <table>
              <tr>
                <th>Código</th>
                <th>Description</th>
              </tr>
              <tr>
                <td>CODE-011</td>
                <td>Client not found</td>
              </tr>
              <tr>
                <td>CODE-012</td>
                <td>Invalid status change. It is not possible to transition from state A to C without passing through B.</td>
              </tr>
              <tr>
                <td>CODE-013</td>
                <td>Status change processed successfully, but it was not possible to create the client's user account.</td>
              </tr>
              <tr>
                <td>CODE-015</td>
                <td>Status change processed successfully, but it was not possible to create the client's API key.</td>
              </tr>
            </table>
  content: 
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: "fail"
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 422
          message:
            type: string
            description: 'Identified error code.'
            example: CODE-005
'500':
  description: "Internal Server Error"
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: "Request status."
            examples: "error"
          code:
            type: integer
            description: "HTTP status code corresponding to the response."
            example: 500
          message:
            type: string
            description: "Error message indicating an internal server failure."
            example: Internal Server Error
security: []

  /api/v1/customers:
  post:
  summary: Create a collaborating client
  deprecated: false
  description: |
    This endpoint allows creating a collaborating client.
  operationId: customers
  tags: 
    - Customers
  parameters:
    - name: Kubit-Api-Key
      in: header
      description: 'Unique key to authenticate the request. Provide this key in the request header.'
      required: true
      example: KU_ZB2bXjQMh...
      schema:
        type: string
    - name: Bearer Token
      in: header
      description: 'Token to authenticate the request.'
      required: true
      example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
      schema:
        type: string
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            rfc:
              type: string
              description: 'RFC. Must be 12 characters for a legal entity and 13 characters for an individual.'
              example: 'XAXX010101000'
            company_name:
              type: string
              format: string
              description: 'Company name.'
              example: 'MY COMPANY S.A. DE C.V.'
            name:
              type: string
              format: string
              description: 'First name. This field must be filled if the person is an individual.'
              example: 'Ernesto Miguel'
            ap_paterno:
              type: string
              format: string
              description: 'Last name (paternal). This field must be filled if the person is an individual.'
              example: 'Aguirre'
            ap_materno:
              type: string
              format: string
              description: 'Last name (maternal). This field must be filled if the person is an individual.'
              example: 'Lopez'
            taxpayer_type_id:
              type: integer
              format: integer
              description: 'Type of taxpayer'
              example: '1 individual, 2 legal entity'
            address:
                 description: 'Tax address'
type: object
properties:
  street:
    type: string
    format: string
    description: 'Street.'
  num_ext:
    type: string
    format: string
    description: 'Exterior number.'
  num_int:
    type: string
    format: string
    description: 'Interior number.'
  reference:
    type: string
    format: string
    description: 'Reference data to reach the location.'
    example: 'One block from the park...'
  neighborhood:
    type: string
    format: string
    description: 'Neighborhood.'
  district:
    type: string
    format: string
    description: 'District / Municipality.'
  estate:
    type: string
    format: string
    description: 'State / Federative entity.'
  cp:
    type: string
    format: string
    description: 'Postal Code.'
    example: '12345'
required:
  - street
  - num_ext
  - neighborhood
  - district
  - estate
  - cp
contact_name:
  type: string
  format: string
  description: 'Full name of the contact.'
contact_email:
  type: string
  format: string
  description: 'Contact email.'
contact_tel:
  type: string
  format: string
  description: 'Contact phone number.'
required:
  - rfc
  - taxpayer_type_id
  - address
  - contact_name
  - contact_email
  - contact_tel
responses:
  '201':
    description: 'Created'
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: string
                    description: 'Request status.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'HTTP status code corresponding to the response.'
                    example: 201
                  data:
                    type: object
                    description: 'Object containing the resulting data.'
                    properties:
                      customer_id:
                        type: string
                        format: string
                        description: 'Unique identifier of the client.'
                    required:
                      - customer_id
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Request status.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'HTTP status code corresponding to the response.'
                    example: 400
                  message:
                    type: string
                    description: Error message indicating that the request was made incorrectly.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Request status.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'HTTP status code corresponding to the response.'
                    example: 401
                  message:
                    type: string
                    description: Error message indicating that you are not authorized to perform the requested action.'
                    example: Unauthorized
        '422':
          description: Unprocessable Entity
            <table>
              <tr>
                <th>Código</th>
                <th>Description</th>
              </tr>
              <tr>
                <td>CODE-013</td>
                <td>It was not possible to create the client's user account</td>
              </tr>
              <tr>
                <td>CODE-014</td>
                <td>Registered email account</td>
              </tr>
            </table>
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Request status.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'HTTP status code corresponding to the response.'
                    example: 422
                  message:
                    type: string
                    description: 'Identified error code.'
                    example: CODE-001
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Request status.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'HTTP status code corresponding to the response.'
                    example: 500
                  message:
                    type: string
                    description: 'Error message indicating an internal server failure.'
                    example: Internal Server Error
      security: []

  /api/v1/customers/paged:
    get:
      summary: Get collaborating clients.
      deprecated: false
      description: |
        This endpoint allows retrieving all collaborating clients.
      operationId: customers_paged
      tags: 
        - Customers
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Unique key to authenticate the request.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token to authenticate the request.
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
          schema:
            type: string
        - name: partnerCustomerId
          in: query
          description: 'Identifier of the contracting client.'
          required: true
          example: paged?partnerCustomerId=12345
          schema:
            type: string
        - name: offset
          in: query
          description: 'Sets the first position to be returned from the query results. The default value is 0, which starts the page at the first result.'
          required: true
          example: paged?offset=1
          schema:
            type: string
        - name: limit
          in: query
          description: 'Indicates the number of records to return per page.'
          required: true
          example: paged?limit=20
          schema:
            type: string
        - name: filter
          in: query
          description: 'Text to be used as a search filter.'
          required: true
          example: Text to serch...
          schema:
            type: string
      responses:
        '200':
          description: "Ok"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Request status.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'HTTP status code corresponding to the response.'
                    example: 200
                  total:
                    type: integer
                    description: 'Total records found.'
                    example: 2
                  data:
                    type: array
                    description: 'Object containing the resulting data.'
                    items:
                      type: object
                      properties:
                        rfc:
                          type: string
                          format: string
                          description: 'RFC.'
                        parent_id:
                          type: string
                          format: string
                          description: 'Identifier of the parent record.'
                        account_customer_id:
                          type: string
                          format: string
                          description: 'Identifier of the contracting client to which it belongs.'
                        level:
                          type: integer
                          format: integer
                          description: 'Level occupied by the client in the hierarchy, meaning whether it belongs to another collaborating client'
                        company_name:
                          type: string
                          format: string
                          description: 'Business name.'
name:
  type: string
  format: string
  description: 'Name. Only for individuals.'
ap_paterno:
  type: string
  format: string
  description: 'Paternal surname. Only for individuals.'
ap_materno:
  type: string
  format: string
  description: 'Maternal surname. Only for individuals.'
taxpayer_type_id:
  type: integer
  format: integer
  description: 'Type of taxpayer.'
  example: '1 for individuals, 2 for legal entities'
address:
  description: 'Fiscal address.'
  type: object
  properties:
    street:
      type: string
      format: string
      description: 'Street.'
    num_ext:
      type: string
      format: string
      description: 'Exterior number.'
    num_int:
      type: string
      format: string
      description: 'Interior number.'
    reference:
      type: string
      format: string
      description: 'Reference data to reach the location.'
    neighborhood:
      type: string
      format: string
      description: 'Neighborhood.'
    district:
      type: string
      format: string
      description: 'Delegation / Municipality.'
    estate:
      type: string
      format: string
      description: 'State / Federal entity.'
    cp:
      type: string
      format: string
      description: 'Postal code.'
contact_name:
  type: string
  format: string
  description: 'Full name of the contact person.'
contact_email:
  type: string
  format: string
  description: 'Contact email.'
contact_tel:
  type: string
  format: string
  description: 'Contact phone number.'
creation_date:
  type: string
  format: string
  description: 'Date when the record was created.'
 '400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
        '500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/customers/{customerId}:
  get:
    summary: Get a collaborator customer by ID
    deprecated: false
    description: |
      This endpoint allows retrieving a collaborator customer by their ID.
    operationId: customers_id
    tags:
      - Customers
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: customerId
        in: path
        description: 'Identifier of the collaborator customer.'
        required: true
        example: customers/12345
        schema:
          type: string
    responses:
      '200':
        description: "Ok"
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: object
                  description: 'Object containing the resulting data.'
                  properties:
                    rfc:
                      type: string
                      format: string
                      description: 'RFC.'
                    parent_id:
                      type: string
                      format: string
                      description: 'Identifier of the parent record.'
                    account_customer_id:
                      type: string
                      format: string
                      description: 'Identifier of the contracting customer to which it belongs.'
                    level:
                      type: integer
                      format: integer
                      description: 'Level the customer occupies in the hierarchy, meaning if it belongs to another collaborator customer.'
                    company_name:
                      type: string
                      format: string
                      description: 'Business name.'
                    name:
                      type: string
                      format: string
                      description: 'First name. Only for individuals.'
                    ap_paterno:
                      type: string
                      format: string
                      description: 'Paternal surname. Only for individuals.'
                    ap_materno:
                      type: string
                      format: string
                      description: 'Maternal surname. Only for individuals.'
                    taxpayer_type_id:
                      type: integer
                      format: integer
                      description: 'Taxpayer type.'
                      example: '1 for individual, 2 for legal entity.'
                    address:
                      description: 'Fiscal address.'
                      type: object
                      properties:
                        street:
                          type: string
                          format: string
                          description: 'Street.'
                        num_ext:
                          type: string
                          format: string
                          description: 'External number.'
                        num_int:
                          type: string
                          format: string
                          description: 'Internal number.'
                        reference:
                          type: string
                          format: string
                          description: 'Reference details to locate the address.'
                            neighborhood:
  type: string
  format: string
  description: 'Neighborhood.'
district:
  type: string
  format: string
  description: 'District / Municipality.'
estate:
  type: string
  format: string
  description: 'State / Federal entity.'
cp:
  type: string
  format: string
  description: 'Postal Code.'
contact_name:
  type: string
  format: string
  description: 'Full name of the contact person.'
contact_email:
  type: string
  format: string
  description: 'Contact email address.'
contact_tel:
  type: string
  format: string
  description: 'Contact phone number.'
creation_date:
  type: string
  format: string
  description: 'Date when the record was created.'
'400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

  /api/v1/accounts:
  post:
    summary: Create an Account
    deprecated: false
    description: |
      This endpoint allows creating an account.
    operationId: accounts
    tags: 
      - Accounts
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: accountType
        in: query
        description: 'Type of account to be created.'
        required: true
        example: '1 Account, 2 Subaccount'
        schema:
          type: string
      - name: customerId
        in: query
        description: 'Unique identifier of the customer.'
        required: true
        schema:
          type: string
    responses:
      '201':
        description: 'Created'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 201
      '400':
        description: 'Bad Request'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 400
                message:
                  type: string
                  description: 'Error message indicating that the request was made incorrectly.'
                  example: Bad Request
      '401':
        description: 'Unauthorized'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 401
                message:
                  type: string
                  description: 'Error message indicating that you are not authorized to perform the requested action.'
                  example: Unauthorized
        '422':
          description: Unprocessable Entity
            <table>
              <tr>
                <th>Código</th>
                <th>Descripción</th>
              </tr>
              <tr>
                <td>CODE-004</td>
                <td>Customerwith unapproved status </td>
              </tr>
              <tr>
                <td>CODE-005</td>
                <td>Owner not found</td>
              </tr>
              <tr>
                <td>CODE-006</td>
                <td>Cost center not assigned or unavailable</td>
              </tr>
              <tr>
                <td>CODE-007</td>
                <td> No payment provider found</td>
              </tr>
              <tr>
                <td>CODE-009</td>
                <td>Invalid account level</td>
              </tr>
            </table>
          content: 
            application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 422
                message:
                  type: string
                  description: 'Identified error code.'
                  example: CODE-001
        '500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/accounts/{accountId}:
  get:
    summary: Get an account by ID
    deprecated: false
    description: |
      This endpoint allows retrieving account data by its ID.
    operationId: accounts_id
    tags:
      - Accounts
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: accountId
        in: path
        description: 'Unique identifier of the account (account number).'
        required: true
        example: accounts/12345
        schema:
          type: string
    responses:
      '200':
        description: "Ok"
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: object
                  description: 'Object containing the resulting data.'
                  properties:
                    id:
                      type: string
                      format: string
                      description: 'Unique identifier of the account (account number).'
                    type:
                      type: integer
                      format: integer
                      description: 'Account type.'
                      example: '1 Account, 2 Subaccount'
                    amount:
                      type: money
                      format: money
                      description: 'Available balance.'
                    currency:
                      type: string
                      format: string
                      description: 'Currency.'
                    linked_cellphone:
                      type: string
                      format: string
                      description: 'Linked phone number.'
                    creation_date:
                      type: string
                      format: string
                      description: 'Date when the record was created.'
                    clabes:
                      type: array
                      items:
                        type: object
                        description: 'Clabe accounts associated with the main account. There can be one clabe account for each payment provider integrated into the platform.'
                        properties:
                          id:
                            type: string
                            format: string
                            description: 'Unique identifier of the clabe account.'
                          payment_provider_id:
                            type: string
                            format: string
                            description: 'Unique identifier of the payment provider.'
                          account_id:
                            type: string
                            format: string
                            description: 'Unique identifier of the associated account.'
                          clabe:
                            type: string
                            format: string
                            description: 'Clabe account number.'
        '400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/accounts/clabes/{clabe}:
  get:
    summary: Get an Account by CLABE
    deprecated: false
    description: |
      This endpoint allows retrieving account details using the CLABE account number.
    operationId: accounts_clabe
    tags: 
      - Accounts
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: clabe
        in: path
        description: 'CLABE account number.'
        required: true
        example: clabes/1234567890123456
        schema:
          type: string
    responses:
      '200':
        description: "Ok"
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: object
                  description: 'Object containing the resulting data.'
                  properties:
                      id:
                        type: string
                        format: string
                        description: 'Unique identifier of the account (account number).'
                      type:
                        type: integer
                        format: integer
                        description: 'Type of account.'
                        example: '1 Account, 2 Subaccount'
                      amount:
                        type: money
                        format: money
                        description: 'Available balance.'
                      currency:
                        type: string
                        format: string
                        description: 'Currency.'
                      linked_cellphone:
                        type: string
                        format: string
                        description: 'Linked phone number.'
                      creation_date:
                        type: string
                        format: string
                        description: 'Date when the record was created.'
                      clabes:
                        type: array
                        items:
                          type: object
                          description: 'CLABE accounts associated with the main account. There can be one CLABE account per payment provider integrated into the platform.'
                          properties:
                            id: 
                              type: string
                              format: string
                              description: 'Unique identifier of the CLABE account.'
                            payment_provider_id: 
                              type: string
                              format: string
                              description: 'Unique identifier of the payment provider.'
                            account_id: 
                              type: string
                              format: string
                              description: 'Unique identifier of the associated account.'
                            clabe: 
                              type: string
                              format: string
                              description: 'CLABE account number.'
       '400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/accounts/customers/{customerId}:
  get:
    summary: Get Accounts by Customer
    deprecated: false
    description: |
      This endpoint allows retrieving customer accounts by their ID.
    operationId: accounts_customerId
    tags: 
      - Accounts
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: customerId
        in: path
        description: 'Unique identifier of the customer.'
        required: true
        example: customers/12345
        schema:
          type: string
    responses:
      '200':
        description: "Ok"
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: array
                  description: 'Object containing the resulting data.'
                  items:
                    properties:
                      id:
                        type: string
                        format: string
                        description: 'Unique identifier of the account (account number).'
                      type:
                        type: integer
                        format: integer
                        description: 'Type of account.'
                        example: '1 Account, 2 Subaccount'
                      amount:
                        type: money
                        format: money
                        description: 'Available balance.'
                      currency:
                        type: string
                        format: string
                        description: 'Currency.'
                      linked_cellphone:
                        type: string
                        format: string
                        description: 'Linked phone number.'
                      creation_date:
                        type: string
                        format: string
                        description: 'Date when the record was created.'
                      clabes:
                        type: array
                        items:
                          type: object
                          description: 'CLABE accounts associated with the main account. There can be one CLABE account per payment provider integrated into the platform.'
                          properties:
                            id: 
                              type: string
                              format: string
                              description: 'Unique identifier of the CLABE account.'
                            payment_provider_id: 
                              type: string
                              format: string
                              description: 'Unique identifier of the payment provider.'
                            account_id: 
                              type: string
                              format: string
                              description: 'Unique identifier of the associated account.'
                            clabe: 
                              type: string
                              format: string
                              description: 'CLABE account number.'
        '400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that the user is not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/accounts/movements/{movementId}:
  get:
    summary: Get movement by ID
    deprecated: false
    description: |
      This endpoint allows retrieving an account movement by its unique identifier.
    operationId: accounts_movements_movementId
    tags:
      - Accounts
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: movementId
        in: path
        description: 'Unique identifier of the movement.'
        required: true
        example: movements/12345
        schema:
          type: string
    responses:
      '200':
        description: "Ok"
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: object
                  description: 'Object containing the resulting data.'
                  properties:
                    id:
                      type: string
                      format: string
                      description: 'Unique identifier of the movement.'
                    account_id:
                      type: string
                      format: string
                      description: 'Unique identifier of the account (account number).'
                    type:
                      type: integer
                      format: integer
                      description: 'Type of movement.'
                      example: '1 SpeiOut, 2 SpeiIn, 3 Transfer'
                    description:
                      type: string
                      format: string
                      description: 'Description.'
                    amount:
                      type: money
                      format: money
                      description: 'Amount.'
                    folio:
                      type: string
                      format: string
                      description: 'Folio.'
                    status:
                      type: string
                      format: string
                      description: 'Status.'
                    operation_date:
                      type: string
                      format: string
                      description: 'Date when the operation was performed.'
                    application_date:
                      type: string
                      format: string
                      description: 'Date when the operation was applied. (Spei)'
                    origin_bank_id:
                      type: string
                      format: string
                      description: 'Origin bank code. (Spei)'
                    payer_name:
                      type: string
                      format: string
                      description: 'Payer name. (Spei)'
                    payer_account:
                      type: string
                      format: string
                      description: 'Payer account number. (Spei)'
                    destination_bank_id:
                      type: string
                      format: string
                      description: 'Destination bank code. (Spei)'
                    beneficiary_name:
                      type: string
                      format: string
                      description: 'Beneficiary name. (Spei)'
                    beneficiary_account:
                      type: string
                      format: string
                      description: 'Beneficiary account number. (Spei)'
                    payment_purpose:
                      type: string
                      format: string
                      description: 'Payment purpose. (Spei)'
                    reference:
                      type: integer
                      format: integer
                      description: 'Reference number. (Spei)'
                    tracking_key:
                      type: string
                      format: string
                      description: 'Tracking key. (Spei)'
        '400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/accounts/{accountId}/movements/paged:
  get:
    summary: Get Paginated Movements
    deprecated: false
    description: |
      This endpoint allows retrieving all movements of an account.
    operationId: accounts_movements_paged
    tags: 
      - Accounts
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: accountId
        in: path
        description: 'Unique identifier of the account (account number).'
        required: true
        example: accounts/12345/movements
        schema:
          type: string
      - name: offset
        in: query
        description: 'Sets the first position to be returned from the query results. The specified value must be greater than 0.'
        required: true
        example: paged?offset=1
        schema:
          type: string
      - name: limit
        in: query
        description: 'Indicates the number of records to return per page.'
        required: true
        example: paged?limit=20
        schema:
          type: string
      - name: type
        in: query
        description: 'Movement type.'
        required: false
        example: paged?type=1
        schema:
          type: integer
      - name: status
        in: query
        description: 'Movement status.'
        required: false
        example: paged?status=scattered
        schema:
          type: string
      - name: startDate
        in: query
        description: 'Initial operation date.'
        required: false
        example: paged?startDate=11/12/2024
        schema:
          type: string
      - name: endDate
        in: query
        description: 'Final operation date.'
        required: false
        example: paged?endDate=11/12/2024
        schema:
          type: string
    responses:
        '200':
  description: 'OK'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            example: "ok"
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 200
          total:
            type: integer
            description: 'Total number of records found.'
            example: 2
          data:
            type: array
            description: 'Object containing the resulting data.'
            items:
              properties:
                id:
                  type: string
                  format: string
                  description: 'Unique identifier of the movement.'
                account_id:
                  type: string
                  format: string
                  description: 'Unique identifier of the account (account number).'
                type:
                  type: integer
                  format: integer
                  description: 'Type of movement.'
                  example: '1 SpeiOut, 2 SpeiIn, 3 Transfer'
                description:
                  type: string
                  format: string
                  description: 'Description of the movement.'
                amount:
                  type: money
                  format: money
                  description: 'Amount of the movement.'
                folio:
                  type: string
                  format: string
                  description: 'Folio of the movement.'
                status:
                  type: string
                  format: string
                  description: 'Status of the movement.'
                operation_date:
                  type: string
                  format: string
                  description: 'Date when the movement was performed.'
                application_date:
                  type: string
                  format: string
                  description: 'Date when the movement was applied. (Spei)'
                origin_bank_id:
                  type: string
                  format: string
                  description: 'Origin bank code. (Spei)'
                payer_name:
                  type: string
                  format: string
                  description: 'Name of the person who performed the movement. (Spei)'
                payer_account:
                  type: string
                  format: string
                  description: 'Account number of the person who performed the movement. (Spei)'
                destination_bank_id:
                  type: string
                  format: string
                  description: 'Destination bank code. (Spei)'
                beneficiary_name:
                  type: string
                  format: string
                  description: 'Name of the beneficiary of the movement. (Spei)'
                beneficiary_account:
                  type: string
                  format: string
                  description: 'Account number of the beneficiary of the movement. (Spei)'
                payment_purpose:
                  type: string
                  format: string
                  description: 'Description of the purpose of the movement. (Spei)'
                reference:
                  type: integer
                  format: integer
                  description: 'Reference number. (Spei)'
                tracking_key:
                  type: string
                  format: string
                  description: 'Tracking key of the movement. (Spei)'
'400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that the user is not authorized to perform the requested action.'
            example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

  /api/v1/accounts/{accountId}/movements/latest:
  get:
    summary: Get Latest Movements
    deprecated: false
    description: |
      This endpoint retrieves the last 5 movements of an account.
    operationId: accounts_movements_latest
    tags: 
      - Accounts
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: accountId
        in: path
        description: 'Unique identifier of the account (account number).'
        required: true
        example: accounts/12345/movements
        schema:
          type: string
    responses:
      '200':
        description: 'OK'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                total:
                  type: integer
                  description: 'Total records found.'
                  example: 1
                data:
                  type: array
                  description: 'Object containing the resulting data.'
                  items:
                    properties:
                      id:
                        type: string
                        format: string
                        description: 'Unique identifier of the movement.'
                      account_id:
                        type: string
                        format: string
                        description: 'Unique identifier of the account (account number).'
                      type:
                        type: integer
                        format: integer
                        description: 'Movement type.'
                        example: '1 SpeiOut, 2 SpeiIn, 3 Transfer'
                      description:
                        type: string
                        format: string
                        description: 'Movement description.'
                      amount:
                        type: money
                        format: money
                        description: 'Movement amount.'
                      folio:
                        type: string
                        format: string
                        description: 'Movement folio.'
                      status:
                        type: string
                        format: string
                        description: 'Movement status.'
                      operation_date:
                        type: string
                        format: string
                        description: 'Date when the movement was made.'
                      application_date:
                        type: string
                        format: string
                        description: 'Date when the movement was applied. (Spei)'
                      origin_bank_id:
                        type: string
                        format: string
                        description: 'Origin bank key. (Spei)'
                      payer_name:
                        type: string
                        format: string
                        description: 'Name of the person who made the movement. (Spei)'
                      payer_account:
                        type: string
                        format: string
                        description: 'Account number of the person who made the movement. (Spei)'
                      destination_bank_id:
                        type: string
                        format: string
                        description: 'Destination bank key. (Spei)'
                      beneficiary_name:
                        type: string
                        format: string
                        description: 'Name of the beneficiary of the movement. (Spei)'
                      beneficiary_account:
                        type: string
                        format: string
                        description: 'Account number of the movement beneficiary. (Spei)'
                      payment_purpose:
                        type: string
                        format: string
                        description: 'Description of the movement purpose. (Spei)'
                      reference:
                        type: integer
                        format: integer
                        description: 'Reference number. (Spei)'
                      tracking_key:
                        type: string
                        format: string
                        description: 'Tracking key of the movement. (Spei)'
      '400':
        description: 'Bad Request'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 400
                message:
                  type: string
                  description: 'Error message indicating that the request was made incorrectly.'
                  example: Bad Request
      '401':
        description: 'Unauthorized'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 401
                message:
                  type: string
                  description: 'Error message indicating that you are not authorized to perform the requested action.'
                  example: Unauthorized
      '500':
        description: 'Internal Server Error'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'error'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 500
                message:
                  type: string
                  description: 'Error message indicating an internal server failure.'
                  example: Internal Server Error
    security: []

  /api/v1/accounts/movements/status:
  get:
    summary: Get movement statuses
    deprecated: false
    description: |
      This endpoint allows retrieving the possible statuses of a movement.
    operationId: movements_status
    tags:
      - Accounts
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
    responses:
      '200':
        description: 'OK'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: array
                  description: 'Object containing the resulting data.'
                  items:
                    properties:
                      id:
                        type: string
                        format: string
                        description: 'Unique identifier of the movement status.'
                      name:
                        type: string
                        format: string
                        description: 'Name of the movement status.'
                      type:
                        type: integer
                        format: integer
                        description: 'Type of the movement status (1 payment, 2 card).'
                    required:
                      - id
                      - name
                      - type
      '400':
        description: 'Bad Request'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 400
                message:
                  type: string
                  description: 'Error message indicating that the request was made incorrectly.'
                  example: Bad Request
      '401':
        description: 'Unauthorized'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 401
                message:
                  type: string
                  description: 'Error message indicating that the user is not authorized to perform the requested action.'
                  example: Unauthorized
      '500':
        description: 'Internal Server Error'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  examples: 'error'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 500
                message:
                  type: string
                  description: 'Error message indicating an internal server failure.'
                  example: Internal Server Error
    security: []

/api/v1/accounts/movements/types:
  get:
    summary: Get movement types
    deprecated: false
    description: |
      This endpoint allows retrieving the possible types of a movement.
    operationId: movements_types
    tags:
      - Accounts
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
    responses:
      '200':
        description: 'Ok'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: array
                  description: 'Object containing the resulting data.'
                  items:
                    properties:
                      id:
                        type: string
                        format: string
                        description: 'Unique identifier of the movement type.'
                      name:
                        type: string
                        format: string
                        description: 'Name of the movement type.'
                      type:
                        type: integer
                        format: integer
                        description: 'Type of the movement type (1 payment, 2 card).'
                    required:
                      - id
                      - name
                      - type
      '400':
        description: 'Bad Request'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 400
                message:
                  type: string
                  description: 'Error message indicating that the request was made incorrectly.'
                  example: Bad Request
      '401':
        description: 'Unauthorized'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 401
                message:
                  type: string
                  description: 'Error message indicating that the user is not authorized to perform the requested action.'
                  example: Unauthorized
      '500':
        description: 'Internal Server Error'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  examples: 'error'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 500
                message:
                  type: string
                  description: 'Error message indicating an internal server failure.'
                  example: Internal Server Error
    security: []

/api/v1/accounts/customers/{customerId}/favorites:
  get:
    summary: Get favorite accounts
    deprecated: false
    description: |
      This endpoint allows retrieving the accounts saved as favorites by a customer.
    operationId: accounts_customerId_favorites
    tags:
      - Accounts
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: customerId
        in: path
        description: 'Unique identifier of the customer.'
        required: true
        example: customers/12345
        schema:
          type: string
    responses:
      '200':
        description: 'OK'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
                data:
                  type: array
                  description: 'Object containing the resulting data.'
                  items:
                    properties:
                      customer_id:
                        type: string
                        format: string
                        description: 'Unique identifier of the customer.'
                      account_id:
                        type: string
                        format: string
                        description: 'Account number.'
                      account_type:
                        type: integer
                        format: integer
                        description: 'Account type.'
                        example: '1 Clabe, 2 Account'
                      account_alias:
                        type: string
                        format: string
                        description: 'Account alias.'
                      beneficiary_name:
                        type: string
                        format: string
                        description: 'Beneficiary name.'
                      beneficiary_email:
                        type: string
                        format: string
                        description: 'Beneficiary email.'
        '400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that the user is not authorized to perform the requested action.'
            example: Unauthorized
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Status of the request.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

/api/v1/spei:
  post:
    summary: Send a payment
    deprecated: false
    description: |
      This endpoint allows sending a payment to another bank.
    operationId: speiout
    tags:
      - Payments
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: Kubit-OTP
        in: header
        description: 'OTP token to secure the request.'
        required: true
        example: OTP 123456
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              concept:
                type: string
                description: 'Reason for the payment.'
                example: Payment
              beneficiary_account:
                type: string
                format: string
                description: 'CLABE account number of the beneficiary.'
                example: '1234567890123456'
              beneficiary_bank:
                type: string
                format: string
                description: 'Bank code of the beneficiary (See catalog at /spei/banks).'
                example: '40002'
              beneficiary_name:
                type: string
                format: string
                description: 'Name of the beneficiary (No special characters or accents).'
                example: Juan Perez Hernandez
              beneficiary_uid:
                type: string
                format: string
                description: 'CURP or RFC of the beneficiary.'
                example: XAXX010101000
              beneficiary_account_type:
                type: integer
                format: integer
                description: 'Account type of the beneficiary.'
                example: 40
              beneficiary_email:
                type: string
                format: string
                description: 'Email account of the beneficiary.'
                example: 'account@server.com'
              payer_account:
                type: string
                format: string
                description: 'CLABE account number of the payer.'
                example: '1234567890123456'
              amount:
                type: money
                format: money
                description: 'Amount of the transfer. The maximum amount per SPEI payment order will be: 999,999,999,999.99.'
                example: 10.00
              numerical_reference:
                type: integer
                format: integer
                description: 'Numeric reference associated with the payment.'
                example: 123
              save_beneficiary_account:
                type: boolean
                format: boolean
                description: 'Save the beneficiary account.'
                example: true
              alias_beneficiary_account:
                type: string
                format: string
                description: 'Name to save the beneficiary account.'
                example: 'My beneficiary'
            required:
              - concept
              - beneficiary_account
              - beneficiary_bank
              - beneficiary_name
              - beneficiary_uid
              - beneficiary_account_type
              - payer_account
              - amount
              - numerical_reference
              - save_beneficiary_account
    responses:
      '200':
        description: 'OK'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
'400':
  description: 'Bad Request'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 400
          message:
            type: string
            description: 'Error message indicating that the request was made incorrectly.'
            example: Bad Request
'401':
  description: 'Unauthorized'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'fail'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 401
          message:
            type: string
            description: 'Error message indicating that you are not authorized to perform the requested action.'
            example: Unauthorized
        '422':
          description: Unprocessable Entity
            <table>
              <tr>
                <th>Código</th>
                <th>Descripción</th>
              </tr>
              <tr>
                <td>CODE-001</td>
                <td>Cuenta no encontrada</td>
              </tr>
              <tr>
                <td>CODE-002</td>
                <td>La cuenta no pertenece al ordenante</td>
              </tr>
              <tr>
                <td>CODE-003</td>
                <td>Fondos insuficientes</td>
              </tr>
              <tr>
                <td>CODE-016</td>
                <td>Error en la configuración de comisión</td>
              </tr>
              <tr>
                <td>CODE-017</td>
                <td>Configuración de comisión no encontrada</td>
              </tr>
              <tr>
                <td>CODE-018</td>
                <td>Error en el cálculo de la comisión</td>
              </tr>
            </table>
          content: 
  application/json:
    schema:
      type: object
      properties:
        status:
          type: string
          description: 'Request status.'
          examples: 'fail'
        code:
          type: integer
          description: 'HTTP status code corresponding to the response.'
          example: 422
        message:
          type: string
          description: 'Identified error code.'
          example: CODE-001
'500':
  description: 'Internal Server Error'
  content:
    application/json:
      schema:
        type: object
        properties:
          status:
            type: string
            description: 'Request status.'
            examples: 'error'
          code:
            type: integer
            description: 'HTTP status code corresponding to the response.'
            example: 500
          message:
            type: string
            description: 'Error message indicating an internal server failure.'
            example: Internal Server Error
security: []

 /api/v1/spei/save:
  post:
    summary: Save a Payment
    deprecated: false
    description: |
      This endpoint allows saving a payment to another bank for later execution.
    operationId: speiout_save
    tags: 
      - Payments
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: Kubit-OTP
        in: header
        description: 'OTP token to secure the request.'
        required: true
        example: OTP 123456
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              concept:
                type: string
                description: 'Payment reason'
                example: Payment
              beneficiary_account:
                type: string
                format: string
                description: 'Beneficiary CLABE account number'
                example: '1234567890123456'
              beneficiary_bank:
                type: string
                format: string
                description: 'Beneficiary bank code (See catalog in /spei/banks)'
                example: '40002'
              beneficiary_name:
                type: string
                format: string
                description: 'Beneficiary name (Without special characters or accents)'
                example: Juan Perez Hernandez
              beneficiary_uid:
                type: string
                format: string
                description: 'Beneficiary CURP or RFC'
                example: XAXX010101000
              beneficiary_account_type:
                type: integer
                format: integer
                description: 'Beneficiary account type'
                example: 40
              beneficiary_email:
                type: string
                format: string
                description: 'Beneficiary email account'
                example: 'account@server.com'
              payer_account:
                type: string
                format: string
                description: 'Payer CLABE account number'
                example: '1234567890123456'
              amount:
                type: money
                format: money
                description: 'Transfer amount. The maximum amount per payment order handled in SPEI will be: 999,999,999,999.99'
                example: 10.00
              numerical_reference:
                type: integer
                format: integer
                description: 'Numerical reference associated with the payment'
                example: 123
              save_beneficiary_account:
                type: boolean
                format: boolean
                description: 'Save the beneficiary account'
                example: true
              alias_beneficiary_account:
                type: string
                format: string
                description: 'Name to save the beneficiary account'
                example: 'My beneficiary'
            required:
              - concept
              - beneficiary_account
              - beneficiary_bank
              - beneficiary_name
              - beneficiary_uid
              - beneficiary_account_type
              - payer_account
              - amount
              - numerical_reference
              - save_beneficiary_account
    responses:
      '200':
        description: 'OK'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
      '400':
        description: 'Bad Request'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 400
                message:
                  type: string
                  description: 'Error message indicating that the request was made incorrectly.'
                  example: Bad Request
      '401':
        description: 'Unauthorized'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 401
                message:
                  type: string
                  description: 'Error message indicating that you are not authorized to perform the requested action.'
                  example: Unauthorized
      '500':
        description: 'Internal Server Error'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Request status.'
                  examples: 'error'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 500
                message:
                  type: string
                  description: 'Error message indicating an internal server failure.'
                  example: Internal Server Error
    security: []

  /api/v1/spei/save/template:
  post:
    summary: Upload a payment template
    deprecated: false
    description: |
      This endpoint allows uploading a payment template for bulk processing.
    operationId: speiout_template
    tags: 
      - Payments
    parameters:
      - name: Kubit-Api-Key
        in: header
        description: 'Unique key to authenticate the request.'
        required: true
        example: KU_ZB2bXjQMh...
        schema:
          type: string
      - name: Bearer Token
        in: header
        description: 'Token to authenticate the request.'
        required: true
        example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
        schema:
          type: string
      - name: Kubit-OTP
        in: header
        description: 'OTP token to secure the request.'
        required: true
        example: OTP 123456
        schema:
          type: string
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              payerAccount:
                type: string
              template:
                type: string
                format: binary
    responses:
      '200':
        description: 'OK'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  example: "ok"
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 200
      '400':
        description: 'Bad Request'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 400
                message:
                  type: string
                  description: 'Error message indicating that the request was made incorrectly.'
                  example: Bad Request
      '401':
        description: 'Unauthorized'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  examples: 'fail'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 401
                message:
                  type: string
                  description: 'Error message indicating that the user is not authorized to perform the requested action.'
                  example: Unauthorized
      '500':
        description: 'Internal Server Error'
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Status of the request.'
                  examples: 'error'
                code:
                  type: integer
                  description: 'HTTP status code corresponding to the response.'
                  example: 500
                message:
                  type: string
                  description: 'Error message indicating an internal server failure.'
                  example: Internal Server Error
    security: []
    
  /spei/orders/saved/process:
    post:
      summary: Procesar pagos guardados
      deprecated: false
      description: |
        Este endpoint permite procesar los pagos a otros bancos que han sido guardados.
      operationId: speiout_process_saved
      tags: 
        - Payments
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
          schema:
            type: string
        - name: Kubit-OTP
          in: header
          description: 'Token OTP para asegurar la solicitud.'
          required: true
          example: OTP 123456
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selected_order_ids:
                  type: array
                  description: 'Conjunto de ids a procesar.'
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

  /api/v1/spei/banks:
    get:
      summary: Obtener bancos
      deprecated: false
      description: |
        Este endpoint permite obtener todos los bancos para realizar un pago.
      operationId: spei_banks
      tags: 
        - Payments
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
                  data:
                    type: array
                    description: 'Objeto que contiene los datos resultantes.'
                    items:
                      properties:
                          code:
                            type: string
                            format: string
                            description: 'Código para identificar el banco cuando se crea una orden de pago.'
                          legalKey:
                            type: string
                            format: string
                            description: 'Clave legal bancaria sin prefijo Banxico.'
                          name:
                            type: string
                            format: string
                            description: 'Nombre del banco.'
                          active:
                            type: boolean
                            format: boolean
                            description: 'Si el banco se encuentra activo.'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

  /api/v1/spei/account-types:
    get:
      summary: Obtener tipos de cuenta
      deprecated: false
      description: |
        Este endpoint permite obtener todos los tipos de cuenta por los que se puede enviar un pago.
      operationId: spei_account_types
      tags: 
        - Payments
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
                  data:
                    type: array
                    description: 'Objeto que contiene los datos resultantes.'
                    items:
                      properties:
                          key:
                            type: string
                            format: string
                            description: 'Identificador unico para el registro de ordenes.'
                          description:
                            type: string
                            format: string
                            description: 'Descripción del tipo de cuenta.'
                          active:
                            type: boolean
                            format: boolean
                            description: 'Si el tipo de cuenta se encuentra activo. Si es falso, el tipo de cuenta no se puede utilizar para crear pedidos.'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

  /api/v1/spei/orders/{orderId}/cep:
    get:
      summary: Obtener CEP
      deprecated: false
      description: |
        Permite obtener la url de la transacción donde Banxico expone el comprobante electrónico de pago.
      operationId: spei_cep
      tags: 
        - Payments
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xyayIsImN...
          schema:
            type: string
        - name: orderId
          in: path
          description: 'Identificador unico de la orden de pago'
          required: true
          example: orders/12345
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
                  data:
                    type: string
                    description: 'Url de la transacción de Banxico'
                    example: 'https://www.banxico.org.mx/cep/go?i=90684&s=20210220&d=i6dsXP742O6kt6TB...'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

  /api/v1/transfers:
    post:
      summary: Realizar un traspaso
      deprecated: false
      description: |
        Este endpoint permite realizar traspasos entre cuentas locales.
      operationId: transfer
      tags: 
        - Transfers
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xya...
          schema:
            type: string
        - name: Kubit-OTP
          in: header
          description: 'Token OTP para realizar la solicitud.'
          required: true
          example: OTP 123456
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payer_account:
                  type: string
                  format: string
                  description: 'Número de cuenta del ordenante'
                  example: '123456789012'
                beneficiary_account:
                  type: string
                  format: string
                  description: 'Número de cuenta del beneficiario'
                  example: '123456789012'
                amount:
                  type: money
                  format: money
                  description: 'Monto del traspaso. El monto máximo del traspaso que se manejará será de: 999,999,999,999.99'
                  example: 10000.00
                concept:
                    type: string
                    description: 'Motivo del traspaso'
                    example: Pago  
                save_beneficiary_account:
                  type: boolean
                  format: boolean
                  description: 'Guardar la cuenta del beneficiario'
                  example: true
                alias_beneficiary_account:
                  type: string
                  format: string
                  description: 'Nombre para guardar la cuenta del beneficiario'
                  example: 'Nombre del beneficiario'
              required:
                - payer_account
                - beneficiary_account
                - amount
                - concept
                - save_beneficiary_account
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '422':
          description: Unprocessable Entity
            <table>
              <tr>
                <th>Código</th>
                <th>Descripción</th>
              </tr>
              <tr>
                <td>CODE-001</td>
                <td>Cuenta no encontrada</td>
              </tr>
              <tr>
                <td>CODE-002</td>
                <td>La cuenta no pertenece al ordenante</td>
              </tr>
              <tr>
                <td>CODE-003</td>
                <td>Fondos insuficientes</td>
              </tr>
              <tr>
                <td>CODE-008</td>
                <td>No es posible realizar traspasos entre diferentes centro de costo</td>
              </tr>
              <tr>
                <td>CODE-016</td>
                <td>Error en la configuración de comisión</td>
              </tr>
              <tr>
                <td>CODE-017</td>
                <td>Configuración de comisión no encontrada</td>
              </tr>
              <tr>
                <td>CODE-018</td>
                <td>Error en el cálculo de la comisión</td>
              </tr>
            </table>
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 422
                  message:
                    type: string
                    description: 'Código del error identificado.'
                    example: CODE-001
                    #examples: ['CODE-001', 'CODE-002']
                    #examples:
                    #  -
                    #    - CODE-001 cuenta no encontrada
                    #  -
                    #    - CODE-002 La cuenta no pertenece al ordenante
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

  /cards/accounts/{accountId}/cards:
    get:
      summary: Obtener tarjetas de una cuenta
      deprecated: false
      description: |
        Este endpoint permite obtener las tarjetas asociadas a una cuenta.
      operationId: get_cards_account
      tags: 
        - Cards
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xya...
          schema:
            type: string
        - name: accountId
          in: path
          description: 'Identificador unico de la cuenta (número de cuenta)'
          required: true
          example: cards/accounts/12345/cards
          schema:
            type: string  
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
                  data:
                    type: object
                    description: 'Objeto que contiene los datos resultantes.'
                    properties:
                        id:
                          type: string
                          format: string
                          description: 'Identificador unico de la tarjeta.'
                        type:
                          type: string
                          format: string
                          description: 'Tipo de tarjeta.'
                        active_function:
                          type: string
                          format: string
                          description: 'Función de la tarjeta, CREDIT o DEBIT.'
                        masked_pan:
                          type: string
                          format: string
                          description: 'Número de la tarjeta.'
                        cardholder_name:
                          type: string
                          format: string
                          description: 'Nombre de la persona asociada a la tarjeta.'
                        product_type:
                          type: string
                          format: string
                          description: 'Tipo de producto.'
                        account_id:
                          type: string
                          format: string
                          description: 'Identificador único de la cuenta asociada a la tarjeta.'
                    required:
                      - id
                      - type
                      - active_function
                      - masked_pan
                      - cardholder_name
                      - product_type
                      - account_id
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

  /cards/{cardId}:
    get:
      summary: Obtener una tarjeta por id
      deprecated: false
      description: |
        Este endpoint permite obtener una tarjeta por su identificador único.
      operationId: get_card_cardId
      tags: 
        - Cards
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xya...
          schema:
            type: string
        - name: cardId
          in: path
          description: 'Identificador único de la tarjeta'
          required: true
          example: cards/53aa35c8-e659-44b2-882f-f6056e443c99
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
                  data:
                    type: object
                    description: 'Objeto que contiene los datos resultantes.'
                    properties:
                        id:
                          type: string
                          format: string
                          description: 'Identificador unico de la tarjeta.'
                        type:
                          type: string
                          format: string
                          description: 'Tipo de tarjeta.'
                        active_function:
                          type: string
                          format: string
                          description: 'Función de la tarjeta, CREDIT o DEBIT.'
                        masked_pan:
                          type: string
                          format: string
                          description: 'Número de la tarjeta.'
                        cardholder_name:
                          type: string
                          format: string
                          description: 'Nombre de la persona asociada a la tarjeta.'
                        product_type:
                          type: string
                          format: string
                          description: 'Tipo de producto.'
                        status:
                          type: string
                          format: string
                          description: 'Estatus de la tarjeta.'
                        status_reason:
                          type: string
                          format: string
                          description: 'Razón del estatus de la tarjeta.'
                        embossing_setup_id:
                          type: string
                          format: string
                          description: ''
                        embossing_status:
                          type: string
                          format: string
                          description: ''
                        profile_id:
                          type: string
                          format: string
                          description: ''
                    required:
                      - id
                      - type
                      - active_function
                      - masked_pan
                      - cardholder_name
                      - product_type
                      - status
                      - status_reason
                      - embossing_setup_id
                      - embossing_status
                      - profile_id
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

  /cards/{cardId}/data:
    get:
      summary: Obtener datos de una tarjeta
      deprecated: false
      description: |
        Este endpoint permite obtener los datos sensibles de una tarjeta.
      operationId: get_card_cardData
      tags: 
        - Cards
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xya...
          schema:
            type: string
        - name: cardId
          in: path
          description: 'Identificador único de la tarjeta'
          required: true
          example: cards/53aa35c8-e659-44b2-882f-f6056e443c99
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
                  data:
                    type: object
                    description: 'Objeto que contiene los datos resultantes.'
                    properties:
                      id:
                        type: string
                        format: string
                        description: 'Identificador unico de la tarjeta.'
                      pan:
                        type: string
                        format: string
                        description: 'Número de la tarjeta.'
                      masked_pan:
                        type: string
                        format: string
                        description: 'Número de la tarjeta enmascarado.'
                      cardholder_name:
                        type: string
                        format: string
                        description: 'Nombre de la persona asociada a la tarjeta.'
                      expiration_date:
                        type: string
                        format: string
                        description: 'Fecha de expiración de la tarjeta.'
                      cvv:
                        type: string
                        format: string
                        description: 'CVV de la tarjeta.'
                required:
                  - id
                  - pan
                  - masked_pan
                  - cardholder_name
                  - expiration_date
                  - cvv
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

  /cards/{cardId}/pin:
    get:
      summary: Obtener PIN de una tarjeta
      deprecated: false
      description: |
        Este endpoint permite obtener el PIN de una tarjeta.
      operationId: get_card_PIN
      tags: 
        - Cards
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xya...
          schema:
            type: string
        - name: cardId
          in: path
          description: 'Identificador único de la tarjeta'
          required: true
          example: cards/53aa35c8-e659-44b2-882f-f6056e443c99
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
                  data:
                    type: object
                    description: 'Objeto que contiene los datos resultantes.'
                    properties:
                      pin:
                        type: string
                        format: string
                        description: 'PIN de la tarjeta.'
                required:
                  - pin
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []
  
  /cards/{cardId}/dynamic-cvv:
    post:
      summary: Crear un cvv dinámico
      deprecated: false
      description: |
        Este endpoint permite crear un cvv dinámico para una tarjeta.
      operationId: create_card_dynamic_cvv
      tags: 
        - Cards
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xya...
          schema:
            type: string
        - name: cardId
          in: path
          description: 'Identificador único de la tarjeta'
          required: true
          example: cards/53aa35c8-e659-44b2-882f-f6056e443c99
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
                  data:
                    type: object
                    description: 'Objeto que contiene los datos resultantes.'
                    properties:
                      card_id:
                        type: string
                        format: string
                        description: 'Identificador único de la tarjeta.'
                      cvv:
                        type: string
                        format: string
                        description: 'CVV dinámico de la tarjeta.'
                      generation_date:
                        type: datetime
                        format: datetime
                        description: 'fecha de generación del cvv dinámico.'  
                      expiration_date:
                        type: datetime
                        format: datetime
                        description: 'fecha de expiración del cvv dinámico.'
                required:
                  - card_id
                  - cvv
                  - generation_date
                  - expiration_date
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

  /cards/{cardId}/dynamic-cvv:
    get:
      summary: Consultar un cvv dinámico
      deprecated: false
      description: |
        Este endpoint permite consultar un cvv dinámico que no haya expirado.
      operationId: get_card_dynamic_cvv
      tags: 
        - Cards
      parameters:
        - name: Kubit-Api-Key
          in: header
          description: 'Clave única para autenticar la solicitud.'
          required: true
          example: KU_ZB2bXjQMh...
          schema:
            type: string
        - name: Bearer Token
          in: header
          description: 'Token para autenticar la solicitud.'
          required: true
          example: Bearer a0Z3JLaE43cDY4eVlaQjJiWGpRTWhzQXMxS0xya...
          schema:
            type: string
        - name: cardId
          in: path
          description: 'Identificador único de la tarjeta'
          required: true
          example: cards/53aa35c8-e659-44b2-882f-f6056e443c99
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    example: "ok"
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 200
                  data:
                    type: object
                    description: 'Objeto que contiene los datos resultantes.'
                    properties:
                      card_id:
                        type: string
                        format: string
                        description: 'Identificador único de la tarjeta.'
                      cvv:
                        type: string
                        format: string
                        description: 'CVV dinámico de la tarjeta.'
                      generation_date:
                        type: datetime
                        format: datetime
                        description: 'fecha de generación del cvv dinámico.'  
                      expiration_date:
                        type: datetime
                        format: datetime
                        description: 'fecha de expiración del cvv dinámico.'
                required:
                  - card_id
                  - cvv
                  - generation_date
                  - expiration_date
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 400
                  message:
                    type: string
                    description: Mensaje de error indicando que la petición se realizo de manera incorrecta.'
                    example: Bad Request
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'fail'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 401
                  message:
                    type: string
                    description: Mensaje de error indicando que no esta autorizado para realizar la acción solicitada.'
                    example: Unauthorized
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'Estado de la solicitud.'
                    examples: 'error'
                  code:
                    type: integer
                    description: 'Código de estado HTTP correspondiente a la respuesta.'
                    example: 500
                  message:
                    type: string
                    description: 'Mensaje de error indicando un fallo interno en el servidor.'
                    example: Internal Server Error
      security: []

components:
  schemas: {}
  securitySchemes: {}
servers: []
